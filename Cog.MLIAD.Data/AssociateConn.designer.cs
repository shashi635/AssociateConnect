#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cog.MLIAD.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AssociateConn")]
	public partial class AssociateConnDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddressType(AddressType instance);
    partial void UpdateAddressType(AddressType instance);
    partial void DeleteAddressType(AddressType instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertPhone(Phone instance);
    partial void UpdatePhone(Phone instance);
    partial void DeletePhone(Phone instance);
    partial void InsertPhoneType(PhoneType instance);
    partial void UpdatePhoneType(PhoneType instance);
    partial void DeletePhoneType(PhoneType instance);
    partial void InsertPractice(Practice instance);
    partial void UpdatePractice(Practice instance);
    partial void DeletePractice(Practice instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAssociateAddressMap(AssociateAddressMap instance);
    partial void UpdateAssociateAddressMap(AssociateAddressMap instance);
    partial void DeleteAssociateAddressMap(AssociateAddressMap instance);
    partial void InsertAssociatePhoneMap(AssociatePhoneMap instance);
    partial void UpdateAssociatePhoneMap(AssociatePhoneMap instance);
    partial void DeleteAssociatePhoneMap(AssociatePhoneMap instance);
    partial void InsertDesignation(Designation instance);
    partial void UpdateDesignation(Designation instance);
    partial void DeleteDesignation(Designation instance);
    partial void InsertDiscussion(Discussion instance);
    partial void UpdateDiscussion(Discussion instance);
    partial void DeleteDiscussion(Discussion instance);
    partial void InsertDiscussionDetail(DiscussionDetail instance);
    partial void UpdateDiscussionDetail(DiscussionDetail instance);
    partial void DeleteDiscussionDetail(DiscussionDetail instance);
    partial void InsertAssociate(Associate instance);
    partial void UpdateAssociate(Associate instance);
    partial void DeleteAssociate(Associate instance);
    #endregion
		
		public AssociateConnDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssociateConnDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssociateConnDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssociateConnDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AddressType> AddressTypes
		{
			get
			{
				return this.GetTable<AddressType>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Phone> Phones
		{
			get
			{
				return this.GetTable<Phone>();
			}
		}
		
		public System.Data.Linq.Table<PhoneType> PhoneTypes
		{
			get
			{
				return this.GetTable<PhoneType>();
			}
		}
		
		public System.Data.Linq.Table<Practice> Practices
		{
			get
			{
				return this.GetTable<Practice>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<AssociateAddressMap> AssociateAddressMaps
		{
			get
			{
				return this.GetTable<AssociateAddressMap>();
			}
		}
		
		public System.Data.Linq.Table<AssociatePhoneMap> AssociatePhoneMaps
		{
			get
			{
				return this.GetTable<AssociatePhoneMap>();
			}
		}
		
		public System.Data.Linq.Table<Designation> Designations
		{
			get
			{
				return this.GetTable<Designation>();
			}
		}
		
		public System.Data.Linq.Table<Discussion> Discussions
		{
			get
			{
				return this.GetTable<Discussion>();
			}
		}
		
		public System.Data.Linq.Table<DiscussionDetail> DiscussionDetails
		{
			get
			{
				return this.GetTable<DiscussionDetail>();
			}
		}
		
		public System.Data.Linq.Table<Associate> Associates
		{
			get
			{
				return this.GetTable<Associate>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_Address")]
		public int Add_Address([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AddressTypeID", DbType="Int")] System.Nullable<int> addressTypeID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address1", DbType="VarChar(50)")] string address1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address2", DbType="VarChar(50)")] string address2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address3", DbType="VarChar(50)")] string address3, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="City", DbType="VarChar(50)")] string city, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="State", DbType="VarChar(50)")] string state, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Country", DbType="VarChar(50)")] string country, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zip", DbType="VarChar(10)")] string zip)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, addressTypeID, address1, address2, address3, city, state, country, zip);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_Firewall")]
		public int Add_Firewall([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirewallRequestDesc", DbType="VarChar(50)")] string firewallRequestDesc, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Destination", DbType="VarChar(50)")] string destination, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Source", DbType="VarChar(50)")] string source, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Port", DbType="VarChar(50)")] string port, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProjectID", DbType="Int")] System.Nullable<int> projectID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firewallRequestDesc, destination, source, port, projectID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_Phone")]
		public int Add_Phone([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PhoneTypeID", DbType="Int")] System.Nullable<int> phoneTypeID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="VarChar(50)")] string phone)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, phoneTypeID, phone);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_Software")]
		public int Add_Software([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SoftResourceID", DbType="Int")] System.Nullable<int> softResourceID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SoftCategoryID", DbType="Int")] System.Nullable<int> softCategoryID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SoftVersionID", DbType="Int")] System.Nullable<int> softVersionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProjectID", DbType="Int")] System.Nullable<int> projectID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), softResourceID, softCategoryID, softVersionID, projectID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Delete_Associate")]
		public int Delete_Associate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Delete_Software")]
		public int Delete_Software([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SoftRequestID", DbType="Int")] System.Nullable<int> softRequestID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), softRequestID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Delete_Firewall")]
		public int Delete_Firewall([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirewallRequestID", DbType="Int")] System.Nullable<int> firewallRequestID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firewallRequestID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Edit_Address")]
		public int Edit_Address([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address1", DbType="VarChar(50)")] string address1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address2", DbType="VarChar(50)")] string address2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address3", DbType="VarChar(50)")] string address3, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="City", DbType="VarChar(50)")] string city, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="State", DbType="VarChar(50)")] string state, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Country", DbType="VarChar(50)")] string country, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zip", DbType="Char(10)")] string zip, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AddressTypeID", DbType="Int")] System.Nullable<int> addressTypeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, address1, address2, address3, city, state, country, zip, addressTypeID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Edit_Software")]
		public int Edit_Software([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SoftRequestID", DbType="Int")] System.Nullable<int> softRequestID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SoftResourceID", DbType="Int")] System.Nullable<int> softResourceID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SoftCategoryID", DbType="Int")] System.Nullable<int> softCategoryID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SoftVersionID", DbType="Int")] System.Nullable<int> softVersionID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProjectID", DbType="Int")] System.Nullable<int> projectID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), softRequestID, softResourceID, softCategoryID, softVersionID, projectID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Edit_Associate")]
		public int Edit_Associate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DirectReportID", DbType="Int")] System.Nullable<int> directReportID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOB", DbType="VarChar(20)")] string dOB, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOJ", DbType="VarChar(20)")] string dOJ, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="VarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="VarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mobile", DbType="Char(10)")] string mobile, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ModifiedBy", DbType="Int")] System.Nullable<int> modifiedBy, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DesignationID", DbType="Int")] System.Nullable<int> designationID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocationID", DbType="Int")] System.Nullable<int> locationID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProjectID", DbType="Int")] System.Nullable<int> projectID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, directReportID, dOB, dOJ, email, firstName, isActive, lastName, mobile, modifiedBy, designationID, locationID, projectID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Edit_Firewall")]
		public int Edit_Firewall([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirewallRequestID", DbType="Int")] System.Nullable<int> firewallRequestID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirewallRequestDesc", DbType="VarChar(50)")] string firewallRequestDesc, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Destination", DbType="VarChar(50)")] string destination, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Source", DbType="VarChar(50)")] string source, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Port", DbType="VarChar(50)")] string port, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProjectID", DbType="Int")] System.Nullable<int> projectID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), firewallRequestID, firewallRequestDesc, destination, source, port, projectID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Edit_Phone")]
		public int Edit_Phone([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="VarChar(50)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PhoneTypeID", DbType="Int")] System.Nullable<int> phoneTypeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, phone, phoneTypeID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_Location")]
		public ISingleResult<Get_LocationResult> Get_Location()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Get_LocationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_Account")]
		public ISingleResult<Get_AccountResult> Get_Account([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PracticeID", DbType="Int")] System.Nullable<int> practiceID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), practiceID);
			return ((ISingleResult<Get_AccountResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_AddressType")]
		public ISingleResult<Get_AddressTypeResult> Get_AddressType()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Get_AddressTypeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_ApprovalRequest")]
		public ISingleResult<Get_ApprovalRequestResult> Get_ApprovalRequest()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Get_ApprovalRequestResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_Designation")]
		public ISingleResult<Get_DesignationResult> Get_Designation()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Get_DesignationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_PhoneType")]
		public ISingleResult<Get_PhoneTypeResult> Get_PhoneType()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Get_PhoneTypeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_Role")]
		public ISingleResult<Get_RoleResult> Get_Role()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Get_RoleResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_Practice")]
		public ISingleResult<Get_PracticeResult> Get_Practice()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Get_PracticeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_Project")]
		public ISingleResult<Get_ProjectResult> Get_Project()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Get_ProjectResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_SoftwareCategory")]
		public ISingleResult<Get_SoftwareCategoryResult> Get_SoftwareCategory()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Get_SoftwareCategoryResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_SoftwareVersion")]
		public ISingleResult<Get_SoftwareVersionResult> Get_SoftwareVersion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SoftResourceID", DbType="Int")] System.Nullable<int> softResourceID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), softResourceID);
			return ((ISingleResult<Get_SoftwareVersionResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_SoftwareResource")]
		public ISingleResult<Get_SoftwareResourceResult> Get_SoftwareResource([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SoftCategoryID", DbType="Int")] System.Nullable<int> softCategoryID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), softCategoryID);
			return ((ISingleResult<Get_SoftwareResourceResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Search_Address")]
		public ISingleResult<Search_AddressResult> Search_Address([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID);
			return ((ISingleResult<Search_AddressResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Search_Phone")]
		public ISingleResult<Search_PhoneResult> Search_Phone([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID);
			return ((ISingleResult<Search_PhoneResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_Category")]
		public ISingleResult<Get_CategoryResult> Get_Category()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Get_CategoryResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_TopicDetails")]
		public ISingleResult<Get_TopicDetailsResult> Get_TopicDetails([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> topicID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), topicID);
			return ((ISingleResult<Get_TopicDetailsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.validateUser")]
		public int validateUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string uid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string pwd)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), uid, pwd);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Post_NewTopic")]
		public int Post_NewTopic([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(250)")] string topicHeader, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> isParent, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> createdBy, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> groupID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(8000)")] string topicDesc, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> categoryID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), topicHeader, isParent, createdBy, groupID, topicDesc, categoryID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_AssoListPerGroup")]
		public ISingleResult<Get_AssoListPerGroupResult> Get_AssoListPerGroup([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> groupID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupID);
			return ((ISingleResult<Get_AssoListPerGroupResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Post_ReplyToTopic")]
		public int Post_ReplyToTopic([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> parentID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> createdBy, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReplyDesc", DbType="VarChar(8000)")] string replyDesc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), parentID, createdBy, replyDesc);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_Topics")]
		public ISingleResult<Get_TopicsResult> Get_Topics([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> categoryID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> groupID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), categoryID, groupID);
			return ((ISingleResult<Get_TopicsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_Topic")]
		public ISingleResult<Get_TopicResult> Get_Topic([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> topicID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), topicID);
			return ((ISingleResult<Get_TopicResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateGroup")]
		public int UpdateGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID", DbType="Int")] System.Nullable<int> groupID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, groupID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetUserPWD")]
		public ISingleResult<GetUserPWDResult> GetUserPWD([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string userid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> associateid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userid, associateid, name);
			return ((ISingleResult<GetUserPWDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_AssociateByID")]
		public ISingleResult<Get_AssociateByIDResult> Get_AssociateByID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID);
			return ((ISingleResult<Get_AssociateByIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getAthenticateUser")]
		public ISingleResult<getAthenticateUserResult> getAthenticateUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string uid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string pwd)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), uid, pwd);
			return ((ISingleResult<getAthenticateUserResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getAssociateRoleGroup")]
		public ISingleResult<getAssociateRoleGroupResult> getAssociateRoleGroup([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string uid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), uid);
			return ((ISingleResult<getAssociateRoleGroupResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_GroupByID")]
		public ISingleResult<Get_GroupByIDResult> Get_GroupByID([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> associateID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID);
			return ((ISingleResult<Get_GroupByIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_Group")]
		public ISingleResult<Get_GroupResult> Get_Group()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Get_GroupResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddToGroup")]
		public int AddToGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, groupID, roleID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RemoveFromGroup")]
		public int RemoveFromGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, groupID, roleID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetMemberByGroupAndRole")]
		public ISingleResult<GetMemberByGroupAndRoleResult> GetMemberByGroupAndRole([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupID, roleID);
			return ((ISingleResult<GetMemberByGroupAndRoleResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CreateGroup")]
		public int CreateGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupName", DbType="VarChar(50)")] string groupName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupDesc", DbType="VarChar(50)")] string groupDesc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupName, groupDesc);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Save_Message")]
		public int Save_Message([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(500)")] string message)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, groupID, message);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_AssociateByUserID")]
		public ISingleResult<Get_AssociateByUserIDResult> Get_AssociateByUserID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="VarChar(20)")] string userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
			return ((ISingleResult<Get_AssociateByUserIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Update_Category")]
		public int Update_Category([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CategoryID", DbType="Int")] System.Nullable<int> categoryID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CategoryDesc", DbType="VarChar(50)")] string categoryDesc, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Int")] System.Nullable<int> isActive)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), categoryID, categoryDesc, isActive);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_Category")]
		public int Add_Category([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CategoryDesc", DbType="VarChar(50)")] string categoryDesc, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Int")] System.Nullable<int> isActive)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), categoryDesc, isActive);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Delete_Category")]
		public int Delete_Category([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CategoryID", DbType="Int")] System.Nullable<int> categoryID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), categoryID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_AdminByGroup")]
		public ISingleResult<get_AdminByGroupResult> get_AdminByGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID", DbType="Int")] System.Nullable<int> groupID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupID);
			return ((ISingleResult<get_AdminByGroupResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_Associate")]
		public int Add_Associate(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="VarChar(50)")] string firstName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="VarChar(50)")] string lastName, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mobile", DbType="Char(10)")] string mobile, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string email, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="DirectReportID", DbType="Int")] System.Nullable<int> directReportID, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsApproved", DbType="Bit")] System.Nullable<bool> isApproved, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProjectID", DbType="Int")] System.Nullable<int> projectID, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocationID", DbType="Int")] System.Nullable<int> locationID, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="DesignationID", DbType="Int")] System.Nullable<int> designationID, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOJ", DbType="VarChar(20)")] string dOJ, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOB", DbType="VarChar(20)")] string dOB, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="VarChar(10)")] string userID, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="VarChar(20)")] string password, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID", DbType="Int")] System.Nullable<int> groupID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, firstName, lastName, mobile, email, directReportID, isApproved, projectID, locationID, designationID, dOJ, dOB, isActive, userID, password, groupID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ApproveMember")]
		public int ApproveMember([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID", DbType="Int")] System.Nullable<int> groupID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, roleID, groupID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RejectMember")]
		public int RejectMember([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_SMSAccounts")]
		public ISingleResult<sp_SMSAccountsResult> sp_SMSAccounts([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mode", DbType="NVarChar(30)")] string mode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Email", DbType="NVarChar(64)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="NVarChar(32)")] string password, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SentSMS", DbType="Int")] System.Nullable<int> sentSMS)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mode, id, email, password, phone, sentSMS);
			return ((ISingleResult<sp_SMSAccountsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Add_MobileAssociate")]
		public int Add_MobileAssociate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="VarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="VarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mobile", DbType="Char(10)")] string mobile, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="VarChar(20)")] string password, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string gender)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, firstName, lastName, mobile, email, isActive, password, gender);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_ChangePassword")]
		public int sp_ChangePassword([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AssociateID", DbType="Int")] System.Nullable<int> associateID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OldPassword", DbType="VarChar(20)")] string oldPassword, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewPassword", DbType="VarChar(20)")] string newPassword, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReturnValue", DbType="Int")] ref System.Nullable<int> returnValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), associateID, oldPassword, newPassword, returnValue);
			returnValue = ((System.Nullable<int>)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddressType")]
	public partial class AddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressTypeID;
		
		private string _AddressType1;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressTypeIDChanging(int value);
    partial void OnAddressTypeIDChanged();
    partial void OnAddressType1Changing(string value);
    partial void OnAddressType1Changed();
    #endregion
		
		public AddressType()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="AddressType", Storage="_AddressType1", DbType="VarChar(50)")]
		public string AddressType1
		{
			get
			{
				return this._AddressType1;
			}
			set
			{
				if ((this._AddressType1 != value))
				{
					this.OnAddressType1Changing(value);
					this.SendPropertyChanging();
					this._AddressType1 = value;
					this.SendPropertyChanged("AddressType1");
					this.OnAddressType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressType_Address", Storage="_Addresses", ThisKey="AddressTypeID", OtherKey="AddressTypeID")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressID;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Address3;
		
		private string _City;
		
		private string _State;
		
		private string _Country;
		
		private string _Zip;
		
		private System.Nullable<int> _AddressTypeID;
		
		private EntitySet<AssociateAddressMap> _AssociateAddressMaps;
		
		private EntityRef<AddressType> _AddressType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnAddress3Changing(string value);
    partial void OnAddress3Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnAddressTypeIDChanging(System.Nullable<int> value);
    partial void OnAddressTypeIDChanged();
    #endregion
		
		public Address()
		{
			this._AssociateAddressMaps = new EntitySet<AssociateAddressMap>(new Action<AssociateAddressMap>(this.attach_AssociateAddressMaps), new Action<AssociateAddressMap>(this.detach_AssociateAddressMaps));
			this._AddressType = default(EntityRef<AddressType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(50)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address3", DbType="VarChar(50)")]
		public string Address3
		{
			get
			{
				return this._Address3;
			}
			set
			{
				if ((this._Address3 != value))
				{
					this.OnAddress3Changing(value);
					this.SendPropertyChanging();
					this._Address3 = value;
					this.SendPropertyChanged("Address3");
					this.OnAddress3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressTypeID", DbType="Int")]
		public System.Nullable<int> AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					if (this._AddressType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeID = value;
					this.SendPropertyChanged("AddressTypeID");
					this.OnAddressTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_AssociateAddressMap", Storage="_AssociateAddressMaps", ThisKey="AddressID", OtherKey="AddressID")]
		public EntitySet<AssociateAddressMap> AssociateAddressMaps
		{
			get
			{
				return this._AssociateAddressMaps;
			}
			set
			{
				this._AssociateAddressMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AddressType_Address", Storage="_AddressType", ThisKey="AddressTypeID", OtherKey="AddressTypeID", IsForeignKey=true)]
		public AddressType AddressType
		{
			get
			{
				return this._AddressType.Entity;
			}
			set
			{
				AddressType previousValue = this._AddressType.Entity;
				if (((previousValue != value) 
							|| (this._AddressType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressType.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._AddressType.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._AddressTypeID = value.AddressTypeID;
					}
					else
					{
						this._AddressTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AddressType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssociateAddressMaps(AssociateAddressMap entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_AssociateAddressMaps(AssociateAddressMap entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phone")]
	public partial class Phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhoneID;
		
		private string _PhoneTypeID;
		
		private string _Phone1;
		
		private EntitySet<AssociatePhoneMap> _AssociatePhoneMaps;
		
		private EntityRef<PhoneType> _PhoneType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneIDChanging(int value);
    partial void OnPhoneIDChanged();
    partial void OnPhoneTypeIDChanging(string value);
    partial void OnPhoneTypeIDChanged();
    partial void OnPhone1Changing(string value);
    partial void OnPhone1Changed();
    #endregion
		
		public Phone()
		{
			this._AssociatePhoneMaps = new EntitySet<AssociatePhoneMap>(new Action<AssociatePhoneMap>(this.attach_AssociatePhoneMaps), new Action<AssociatePhoneMap>(this.detach_AssociatePhoneMaps));
			this._PhoneType = default(EntityRef<PhoneType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhoneID
		{
			get
			{
				return this._PhoneID;
			}
			set
			{
				if ((this._PhoneID != value))
				{
					this.OnPhoneIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneID = value;
					this.SendPropertyChanged("PhoneID");
					this.OnPhoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeID", DbType="VarChar(4)")]
		public string PhoneTypeID
		{
			get
			{
				return this._PhoneTypeID;
			}
			set
			{
				if ((this._PhoneTypeID != value))
				{
					if (this._PhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeID = value;
					this.SendPropertyChanged("PhoneTypeID");
					this.OnPhoneTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Phone", Storage="_Phone1", DbType="VarChar(50)")]
		public string Phone1
		{
			get
			{
				return this._Phone1;
			}
			set
			{
				if ((this._Phone1 != value))
				{
					this.OnPhone1Changing(value);
					this.SendPropertyChanging();
					this._Phone1 = value;
					this.SendPropertyChanged("Phone1");
					this.OnPhone1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_AssociatePhoneMap", Storage="_AssociatePhoneMaps", ThisKey="PhoneID", OtherKey="PhoneID")]
		public EntitySet<AssociatePhoneMap> AssociatePhoneMaps
		{
			get
			{
				return this._AssociatePhoneMaps;
			}
			set
			{
				this._AssociatePhoneMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneType_Phone", Storage="_PhoneType", ThisKey="PhoneTypeID", OtherKey="PhoneTypeID", IsForeignKey=true)]
		public PhoneType PhoneType
		{
			get
			{
				return this._PhoneType.Entity;
			}
			set
			{
				PhoneType previousValue = this._PhoneType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneType.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._PhoneType.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._PhoneTypeID = value.PhoneTypeID;
					}
					else
					{
						this._PhoneTypeID = default(string);
					}
					this.SendPropertyChanged("PhoneType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssociatePhoneMaps(AssociatePhoneMap entity)
		{
			this.SendPropertyChanging();
			entity.Phone = this;
		}
		
		private void detach_AssociatePhoneMaps(AssociatePhoneMap entity)
		{
			this.SendPropertyChanging();
			entity.Phone = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhoneType")]
	public partial class PhoneType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PhoneTypeID;
		
		private string _PhoneType1;
		
		private EntitySet<Phone> _Phones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneTypeIDChanging(string value);
    partial void OnPhoneTypeIDChanged();
    partial void OnPhoneType1Changing(string value);
    partial void OnPhoneType1Changed();
    #endregion
		
		public PhoneType()
		{
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeID", DbType="VarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PhoneTypeID
		{
			get
			{
				return this._PhoneTypeID;
			}
			set
			{
				if ((this._PhoneTypeID != value))
				{
					this.OnPhoneTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeID = value;
					this.SendPropertyChanged("PhoneTypeID");
					this.OnPhoneTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PhoneType", Storage="_PhoneType1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PhoneType1
		{
			get
			{
				return this._PhoneType1;
			}
			set
			{
				if ((this._PhoneType1 != value))
				{
					this.OnPhoneType1Changing(value);
					this.SendPropertyChanging();
					this._PhoneType1 = value;
					this.SendPropertyChanged("PhoneType1");
					this.OnPhoneType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneType_Phone", Storage="_Phones", ThisKey="PhoneTypeID", OtherKey="PhoneTypeID")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Practice")]
	public partial class Practice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PracticeID;
		
		private string _PracticeName;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPracticeIDChanging(int value);
    partial void OnPracticeIDChanged();
    partial void OnPracticeNameChanging(string value);
    partial void OnPracticeNameChanged();
    #endregion
		
		public Practice()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PracticeID
		{
			get
			{
				return this._PracticeID;
			}
			set
			{
				if ((this._PracticeID != value))
				{
					this.OnPracticeIDChanging(value);
					this.SendPropertyChanging();
					this._PracticeID = value;
					this.SendPropertyChanged("PracticeID");
					this.OnPracticeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeName", DbType="VarChar(50)")]
		public string PracticeName
		{
			get
			{
				return this._PracticeName;
			}
			set
			{
				if ((this._PracticeName != value))
				{
					this.OnPracticeNameChanging(value);
					this.SendPropertyChanging();
					this._PracticeName = value;
					this.SendPropertyChanged("PracticeName");
					this.OnPracticeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_Account", Storage="_Accounts", ThisKey="PracticeID", OtherKey="PracticeID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Practice = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Practice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountID;
		
		private string _AccountName;
		
		private System.Nullable<int> _PracticeID;
		
		private System.Nullable<bool> _IsActive;
		
		private EntityRef<Practice> _Practice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnPracticeIDChanging(System.Nullable<int> value);
    partial void OnPracticeIDChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Account()
		{
			this._Practice = default(EntityRef<Practice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeID", DbType="Int")]
		public System.Nullable<int> PracticeID
		{
			get
			{
				return this._PracticeID;
			}
			set
			{
				if ((this._PracticeID != value))
				{
					if (this._Practice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPracticeIDChanging(value);
					this.SendPropertyChanging();
					this._PracticeID = value;
					this.SendPropertyChanged("PracticeID");
					this.OnPracticeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Practice_Account", Storage="_Practice", ThisKey="PracticeID", OtherKey="PracticeID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Practice Practice
		{
			get
			{
				return this._Practice.Entity;
			}
			set
			{
				Practice previousValue = this._Practice.Entity;
				if (((previousValue != value) 
							|| (this._Practice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Practice.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Practice.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._PracticeID = value.PracticeID;
					}
					else
					{
						this._PracticeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Practice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssociateAddressMap")]
	public partial class AssociateAddressMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssociateAddressID;
		
		private System.Nullable<int> _AssociateID;
		
		private System.Nullable<int> _AddressID;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Associate> _Associate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssociateAddressIDChanging(int value);
    partial void OnAssociateAddressIDChanged();
    partial void OnAssociateIDChanging(System.Nullable<int> value);
    partial void OnAssociateIDChanged();
    partial void OnAddressIDChanging(System.Nullable<int> value);
    partial void OnAddressIDChanged();
    #endregion
		
		public AssociateAddressMap()
		{
			this._Address = default(EntityRef<Address>);
			this._Associate = default(EntityRef<Associate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateAddressID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssociateAddressID
		{
			get
			{
				return this._AssociateAddressID;
			}
			set
			{
				if ((this._AssociateAddressID != value))
				{
					this.OnAssociateAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AssociateAddressID = value;
					this.SendPropertyChanged("AssociateAddressID");
					this.OnAssociateAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int")]
		public System.Nullable<int> AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					if (this._Associate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssociateIDChanging(value);
					this.SendPropertyChanging();
					this._AssociateID = value;
					this.SendPropertyChanged("AssociateID");
					this.OnAssociateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int")]
		public System.Nullable<int> AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_AssociateAddressMap", Storage="_Address", ThisKey="AddressID", OtherKey="AddressID", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.AssociateAddressMaps.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.AssociateAddressMaps.Add(this);
						this._AddressID = value.AddressID;
					}
					else
					{
						this._AddressID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Associate_AssociateAddressMap", Storage="_Associate", ThisKey="AssociateID", OtherKey="AssociateID", IsForeignKey=true)]
		public Associate Associate
		{
			get
			{
				return this._Associate.Entity;
			}
			set
			{
				Associate previousValue = this._Associate.Entity;
				if (((previousValue != value) 
							|| (this._Associate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Associate.Entity = null;
						previousValue.AssociateAddressMaps.Remove(this);
					}
					this._Associate.Entity = value;
					if ((value != null))
					{
						value.AssociateAddressMaps.Add(this);
						this._AssociateID = value.AssociateID;
					}
					else
					{
						this._AssociateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Associate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssociatePhoneMap")]
	public partial class AssociatePhoneMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssociatePhoneID;
		
		private System.Nullable<int> _PhoneID;
		
		private System.Nullable<int> _AssociateID;
		
		private EntityRef<Phone> _Phone;
		
		private EntityRef<Associate> _Associate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssociatePhoneIDChanging(int value);
    partial void OnAssociatePhoneIDChanged();
    partial void OnPhoneIDChanging(System.Nullable<int> value);
    partial void OnPhoneIDChanged();
    partial void OnAssociateIDChanging(System.Nullable<int> value);
    partial void OnAssociateIDChanged();
    #endregion
		
		public AssociatePhoneMap()
		{
			this._Phone = default(EntityRef<Phone>);
			this._Associate = default(EntityRef<Associate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociatePhoneID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssociatePhoneID
		{
			get
			{
				return this._AssociatePhoneID;
			}
			set
			{
				if ((this._AssociatePhoneID != value))
				{
					this.OnAssociatePhoneIDChanging(value);
					this.SendPropertyChanging();
					this._AssociatePhoneID = value;
					this.SendPropertyChanged("AssociatePhoneID");
					this.OnAssociatePhoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneID", DbType="Int")]
		public System.Nullable<int> PhoneID
		{
			get
			{
				return this._PhoneID;
			}
			set
			{
				if ((this._PhoneID != value))
				{
					if (this._Phone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneIDChanging(value);
					this.SendPropertyChanging();
					this._PhoneID = value;
					this.SendPropertyChanged("PhoneID");
					this.OnPhoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int")]
		public System.Nullable<int> AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					if (this._Associate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssociateIDChanging(value);
					this.SendPropertyChanging();
					this._AssociateID = value;
					this.SendPropertyChanged("AssociateID");
					this.OnAssociateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_AssociatePhoneMap", Storage="_Phone", ThisKey="PhoneID", OtherKey="PhoneID", IsForeignKey=true)]
		public Phone Phone
		{
			get
			{
				return this._Phone.Entity;
			}
			set
			{
				Phone previousValue = this._Phone.Entity;
				if (((previousValue != value) 
							|| (this._Phone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phone.Entity = null;
						previousValue.AssociatePhoneMaps.Remove(this);
					}
					this._Phone.Entity = value;
					if ((value != null))
					{
						value.AssociatePhoneMaps.Add(this);
						this._PhoneID = value.PhoneID;
					}
					else
					{
						this._PhoneID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Phone");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Associate_AssociatePhoneMap", Storage="_Associate", ThisKey="AssociateID", OtherKey="AssociateID", IsForeignKey=true)]
		public Associate Associate
		{
			get
			{
				return this._Associate.Entity;
			}
			set
			{
				Associate previousValue = this._Associate.Entity;
				if (((previousValue != value) 
							|| (this._Associate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Associate.Entity = null;
						previousValue.AssociatePhoneMaps.Remove(this);
					}
					this._Associate.Entity = value;
					if ((value != null))
					{
						value.AssociatePhoneMaps.Add(this);
						this._AssociateID = value.AssociateID;
					}
					else
					{
						this._AssociateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Associate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Designation")]
	public partial class Designation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DesignationID;
		
		private string _Designation1;
		
		private EntitySet<Associate> _Associates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDesignationIDChanging(int value);
    partial void OnDesignationIDChanged();
    partial void OnDesignation1Changing(string value);
    partial void OnDesignation1Changed();
    #endregion
		
		public Designation()
		{
			this._Associates = new EntitySet<Associate>(new Action<Associate>(this.attach_Associates), new Action<Associate>(this.detach_Associates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DesignationID
		{
			get
			{
				return this._DesignationID;
			}
			set
			{
				if ((this._DesignationID != value))
				{
					this.OnDesignationIDChanging(value);
					this.SendPropertyChanging();
					this._DesignationID = value;
					this.SendPropertyChanged("DesignationID");
					this.OnDesignationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Designation", Storage="_Designation1", DbType="VarChar(50)")]
		public string Designation1
		{
			get
			{
				return this._Designation1;
			}
			set
			{
				if ((this._Designation1 != value))
				{
					this.OnDesignation1Changing(value);
					this.SendPropertyChanging();
					this._Designation1 = value;
					this.SendPropertyChanged("Designation1");
					this.OnDesignation1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designation_Associate", Storage="_Associates", ThisKey="DesignationID", OtherKey="DesignationID")]
		public EntitySet<Associate> Associates
		{
			get
			{
				return this._Associates;
			}
			set
			{
				this._Associates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Associates(Associate entity)
		{
			this.SendPropertyChanging();
			entity.Designation = this;
		}
		
		private void detach_Associates(Associate entity)
		{
			this.SendPropertyChanging();
			entity.Designation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Discussion")]
	public partial class Discussion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TopicID;
		
		private string _TopicDesc;
		
		private System.DateTime _PostDateTime;
		
		private System.Nullable<bool> _IsParent;
		
		private int _CreatedBy;
		
		private int _GroupID;
		
		private EntitySet<DiscussionDetail> _DiscussionDetails;
		
		private EntityRef<Associate> _Associate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTopicIDChanging(int value);
    partial void OnTopicIDChanged();
    partial void OnTopicDescChanging(string value);
    partial void OnTopicDescChanged();
    partial void OnPostDateTimeChanging(System.DateTime value);
    partial void OnPostDateTimeChanged();
    partial void OnIsParentChanging(System.Nullable<bool> value);
    partial void OnIsParentChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    #endregion
		
		public Discussion()
		{
			this._DiscussionDetails = new EntitySet<DiscussionDetail>(new Action<DiscussionDetail>(this.attach_DiscussionDetails), new Action<DiscussionDetail>(this.detach_DiscussionDetails));
			this._Associate = default(EntityRef<Associate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TopicID
		{
			get
			{
				return this._TopicID;
			}
			set
			{
				if ((this._TopicID != value))
				{
					this.OnTopicIDChanging(value);
					this.SendPropertyChanging();
					this._TopicID = value;
					this.SendPropertyChanged("TopicID");
					this.OnTopicIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicDesc", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string TopicDesc
		{
			get
			{
				return this._TopicDesc;
			}
			set
			{
				if ((this._TopicDesc != value))
				{
					this.OnTopicDescChanging(value);
					this.SendPropertyChanging();
					this._TopicDesc = value;
					this.SendPropertyChanged("TopicDesc");
					this.OnTopicDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime PostDateTime
		{
			get
			{
				return this._PostDateTime;
			}
			set
			{
				if ((this._PostDateTime != value))
				{
					this.OnPostDateTimeChanging(value);
					this.SendPropertyChanging();
					this._PostDateTime = value;
					this.SendPropertyChanged("PostDateTime");
					this.OnPostDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsParent", DbType="Bit")]
		public System.Nullable<bool> IsParent
		{
			get
			{
				return this._IsParent;
			}
			set
			{
				if ((this._IsParent != value))
				{
					this.OnIsParentChanging(value);
					this.SendPropertyChanging();
					this._IsParent = value;
					this.SendPropertyChanged("IsParent");
					this.OnIsParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._Associate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discussion_DiscussionDetail", Storage="_DiscussionDetails", ThisKey="TopicID", OtherKey="Parent")]
		public EntitySet<DiscussionDetail> DiscussionDetails
		{
			get
			{
				return this._DiscussionDetails;
			}
			set
			{
				this._DiscussionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Associate_Discussion", Storage="_Associate", ThisKey="CreatedBy", OtherKey="AssociateID", IsForeignKey=true)]
		public Associate Associate
		{
			get
			{
				return this._Associate.Entity;
			}
			set
			{
				Associate previousValue = this._Associate.Entity;
				if (((previousValue != value) 
							|| (this._Associate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Associate.Entity = null;
						previousValue.Discussions.Remove(this);
					}
					this._Associate.Entity = value;
					if ((value != null))
					{
						value.Discussions.Add(this);
						this._CreatedBy = value.AssociateID;
					}
					else
					{
						this._CreatedBy = default(int);
					}
					this.SendPropertyChanged("Associate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DiscussionDetails(DiscussionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Discussion = this;
		}
		
		private void detach_DiscussionDetails(DiscussionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Discussion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiscussionDetail")]
	public partial class DiscussionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DiscussionDetailID;
		
		private string _DetailDesc;
		
		private int _Parent;
		
		private int _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private EntityRef<Discussion> _Discussion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiscussionDetailIDChanging(int value);
    partial void OnDiscussionDetailIDChanged();
    partial void OnDetailDescChanging(string value);
    partial void OnDetailDescChanged();
    partial void OnParentChanging(int value);
    partial void OnParentChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    #endregion
		
		public DiscussionDetail()
		{
			this._Discussion = default(EntityRef<Discussion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscussionDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DiscussionDetailID
		{
			get
			{
				return this._DiscussionDetailID;
			}
			set
			{
				if ((this._DiscussionDetailID != value))
				{
					this.OnDiscussionDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DiscussionDetailID = value;
					this.SendPropertyChanged("DiscussionDetailID");
					this.OnDiscussionDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailDesc", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string DetailDesc
		{
			get
			{
				return this._DetailDesc;
			}
			set
			{
				if ((this._DetailDesc != value))
				{
					this.OnDetailDescChanging(value);
					this.SendPropertyChanging();
					this._DetailDesc = value;
					this.SendPropertyChanged("DetailDesc");
					this.OnDetailDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parent", DbType="Int NOT NULL")]
		public int Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					if (this._Discussion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discussion_DiscussionDetail", Storage="_Discussion", ThisKey="Parent", OtherKey="TopicID", IsForeignKey=true)]
		public Discussion Discussion
		{
			get
			{
				return this._Discussion.Entity;
			}
			set
			{
				Discussion previousValue = this._Discussion.Entity;
				if (((previousValue != value) 
							|| (this._Discussion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discussion.Entity = null;
						previousValue.DiscussionDetails.Remove(this);
					}
					this._Discussion.Entity = value;
					if ((value != null))
					{
						value.DiscussionDetails.Add(this);
						this._Parent = value.TopicID;
					}
					else
					{
						this._Parent = default(int);
					}
					this.SendPropertyChanged("Discussion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Associate")]
	public partial class Associate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssociateID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Mobile;
		
		private string _email;
		
		private int _DirectReportID;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedOn;
		
		private bool _IsApproved;
		
		private System.Nullable<int> _ProjectID;
		
		private System.Nullable<int> _LocationID;
		
		private System.Nullable<int> _DesignationID;
		
		private string _DOJ;
		
		private string _DOB;
		
		private System.Nullable<bool> _IsActive;
		
		private string _UserId;
		
		private string _Password;
		
		private EntitySet<AssociateAddressMap> _AssociateAddressMaps;
		
		private EntitySet<AssociatePhoneMap> _AssociatePhoneMaps;
		
		private EntitySet<Discussion> _Discussions;
		
		private EntityRef<Designation> _Designation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssociateIDChanging(int value);
    partial void OnAssociateIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnDirectReportIDChanging(int value);
    partial void OnDirectReportIDChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedOnChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnProjectIDChanging(System.Nullable<int> value);
    partial void OnProjectIDChanged();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    partial void OnDesignationIDChanging(System.Nullable<int> value);
    partial void OnDesignationIDChanged();
    partial void OnDOJChanging(string value);
    partial void OnDOJChanged();
    partial void OnDOBChanging(string value);
    partial void OnDOBChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Associate()
		{
			this._AssociateAddressMaps = new EntitySet<AssociateAddressMap>(new Action<AssociateAddressMap>(this.attach_AssociateAddressMaps), new Action<AssociateAddressMap>(this.detach_AssociateAddressMaps));
			this._AssociatePhoneMaps = new EntitySet<AssociatePhoneMap>(new Action<AssociatePhoneMap>(this.attach_AssociatePhoneMaps), new Action<AssociatePhoneMap>(this.detach_AssociatePhoneMaps));
			this._Discussions = new EntitySet<Discussion>(new Action<Discussion>(this.attach_Discussions), new Action<Discussion>(this.detach_Discussions));
			this._Designation = default(EntityRef<Designation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					this.OnAssociateIDChanging(value);
					this.SendPropertyChanging();
					this._AssociateID = value;
					this.SendPropertyChanged("AssociateID");
					this.OnAssociateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectReportID", DbType="Int NOT NULL")]
		public int DirectReportID
		{
			get
			{
				return this._DirectReportID;
			}
			set
			{
				if ((this._DirectReportID != value))
				{
					this.OnDirectReportIDChanging(value);
					this.SendPropertyChanging();
					this._DirectReportID = value;
					this.SendPropertyChanged("DirectReportID");
					this.OnDirectReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedOn
		{
			get
			{
				return this._ModifiedOn;
			}
			set
			{
				if ((this._ModifiedOn != value))
				{
					this.OnModifiedOnChanging(value);
					this.SendPropertyChanging();
					this._ModifiedOn = value;
					this.SendPropertyChanged("ModifiedOn");
					this.OnModifiedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationID", DbType="Int")]
		public System.Nullable<int> DesignationID
		{
			get
			{
				return this._DesignationID;
			}
			set
			{
				if ((this._DesignationID != value))
				{
					if (this._Designation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDesignationIDChanging(value);
					this.SendPropertyChanging();
					this._DesignationID = value;
					this.SendPropertyChanged("DesignationID");
					this.OnDesignationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOJ", DbType="VarChar(20)")]
		public string DOJ
		{
			get
			{
				return this._DOJ;
			}
			set
			{
				if ((this._DOJ != value))
				{
					this.OnDOJChanging(value);
					this.SendPropertyChanging();
					this._DOJ = value;
					this.SendPropertyChanged("DOJ");
					this.OnDOJChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="VarChar(20)")]
		public string DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(10)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Associate_AssociateAddressMap", Storage="_AssociateAddressMaps", ThisKey="AssociateID", OtherKey="AssociateID")]
		public EntitySet<AssociateAddressMap> AssociateAddressMaps
		{
			get
			{
				return this._AssociateAddressMaps;
			}
			set
			{
				this._AssociateAddressMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Associate_AssociatePhoneMap", Storage="_AssociatePhoneMaps", ThisKey="AssociateID", OtherKey="AssociateID")]
		public EntitySet<AssociatePhoneMap> AssociatePhoneMaps
		{
			get
			{
				return this._AssociatePhoneMaps;
			}
			set
			{
				this._AssociatePhoneMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Associate_Discussion", Storage="_Discussions", ThisKey="AssociateID", OtherKey="CreatedBy")]
		public EntitySet<Discussion> Discussions
		{
			get
			{
				return this._Discussions;
			}
			set
			{
				this._Discussions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Designation_Associate", Storage="_Designation", ThisKey="DesignationID", OtherKey="DesignationID", IsForeignKey=true)]
		public Designation Designation
		{
			get
			{
				return this._Designation.Entity;
			}
			set
			{
				Designation previousValue = this._Designation.Entity;
				if (((previousValue != value) 
							|| (this._Designation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Designation.Entity = null;
						previousValue.Associates.Remove(this);
					}
					this._Designation.Entity = value;
					if ((value != null))
					{
						value.Associates.Add(this);
						this._DesignationID = value.DesignationID;
					}
					else
					{
						this._DesignationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Designation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssociateAddressMaps(AssociateAddressMap entity)
		{
			this.SendPropertyChanging();
			entity.Associate = this;
		}
		
		private void detach_AssociateAddressMaps(AssociateAddressMap entity)
		{
			this.SendPropertyChanging();
			entity.Associate = null;
		}
		
		private void attach_AssociatePhoneMaps(AssociatePhoneMap entity)
		{
			this.SendPropertyChanging();
			entity.Associate = this;
		}
		
		private void detach_AssociatePhoneMaps(AssociatePhoneMap entity)
		{
			this.SendPropertyChanging();
			entity.Associate = null;
		}
		
		private void attach_Discussions(Discussion entity)
		{
			this.SendPropertyChanging();
			entity.Associate = this;
		}
		
		private void detach_Discussions(Discussion entity)
		{
			this.SendPropertyChanging();
			entity.Associate = null;
		}
	}
	
	public partial class Get_LocationResult
	{
		
		private int _LocationID;
		
		private string _Location;
		
		public Get_LocationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this._LocationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this._Location = value;
				}
			}
		}
	}
	
	public partial class Get_AccountResult
	{
		
		private int _AccountID;
		
		private string _AccountName;
		
		public Get_AccountResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this._AccountID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this._AccountName = value;
				}
			}
		}
	}
	
	public partial class Get_AddressTypeResult
	{
		
		private int _AddressTypeID;
		
		private string _AddressType;
		
		public Get_AddressTypeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressTypeID", DbType="Int NOT NULL")]
		public int AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					this._AddressTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressType", DbType="VarChar(50)")]
		public string AddressType
		{
			get
			{
				return this._AddressType;
			}
			set
			{
				if ((this._AddressType != value))
				{
					this._AddressType = value;
				}
			}
		}
	}
	
	public partial class Get_ApprovalRequestResult
	{
		
		private int _AssociateID;
		
		public Get_ApprovalRequestResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int NOT NULL")]
		public int AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					this._AssociateID = value;
				}
			}
		}
	}
	
	public partial class Get_DesignationResult
	{
		
		private int _DesignationID;
		
		private string _Designation;
		
		public Get_DesignationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationID", DbType="Int NOT NULL")]
		public int DesignationID
		{
			get
			{
				return this._DesignationID;
			}
			set
			{
				if ((this._DesignationID != value))
				{
					this._DesignationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designation", DbType="VarChar(50)")]
		public string Designation
		{
			get
			{
				return this._Designation;
			}
			set
			{
				if ((this._Designation != value))
				{
					this._Designation = value;
				}
			}
		}
	}
	
	public partial class Get_PhoneTypeResult
	{
		
		private string _PhoneTypeID;
		
		private string _PhoneType;
		
		public Get_PhoneTypeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeID", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string PhoneTypeID
		{
			get
			{
				return this._PhoneTypeID;
			}
			set
			{
				if ((this._PhoneTypeID != value))
				{
					this._PhoneTypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PhoneType
		{
			get
			{
				return this._PhoneType;
			}
			set
			{
				if ((this._PhoneType != value))
				{
					this._PhoneType = value;
				}
			}
		}
	}
	
	public partial class Get_RoleResult
	{
		
		private int _RoleID;
		
		private string _RoleDesc;
		
		public Get_RoleResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleDesc", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string RoleDesc
		{
			get
			{
				return this._RoleDesc;
			}
			set
			{
				if ((this._RoleDesc != value))
				{
					this._RoleDesc = value;
				}
			}
		}
	}
	
	public partial class Get_PracticeResult
	{
		
		private int _PracticeID;
		
		private string _PracticeName;
		
		public Get_PracticeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeID", DbType="Int NOT NULL")]
		public int PracticeID
		{
			get
			{
				return this._PracticeID;
			}
			set
			{
				if ((this._PracticeID != value))
				{
					this._PracticeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeName", DbType="VarChar(50)")]
		public string PracticeName
		{
			get
			{
				return this._PracticeName;
			}
			set
			{
				if ((this._PracticeName != value))
				{
					this._PracticeName = value;
				}
			}
		}
	}
	
	public partial class Get_ProjectResult
	{
		
		private int _ProjectID;
		
		private string _ProjectName;
		
		public Get_ProjectResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
	}
	
	public partial class Get_SoftwareCategoryResult
	{
		
		private int _SoftCategoryID;
		
		private string _SoftCategoryDesc;
		
		public Get_SoftwareCategoryResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftCategoryID", DbType="Int NOT NULL")]
		public int SoftCategoryID
		{
			get
			{
				return this._SoftCategoryID;
			}
			set
			{
				if ((this._SoftCategoryID != value))
				{
					this._SoftCategoryID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftCategoryDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SoftCategoryDesc
		{
			get
			{
				return this._SoftCategoryDesc;
			}
			set
			{
				if ((this._SoftCategoryDesc != value))
				{
					this._SoftCategoryDesc = value;
				}
			}
		}
	}
	
	public partial class Get_SoftwareVersionResult
	{
		
		private int _SoftVersionID;
		
		private string _SoftVersionDesc;
		
		public Get_SoftwareVersionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftVersionID", DbType="Int NOT NULL")]
		public int SoftVersionID
		{
			get
			{
				return this._SoftVersionID;
			}
			set
			{
				if ((this._SoftVersionID != value))
				{
					this._SoftVersionID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftVersionDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SoftVersionDesc
		{
			get
			{
				return this._SoftVersionDesc;
			}
			set
			{
				if ((this._SoftVersionDesc != value))
				{
					this._SoftVersionDesc = value;
				}
			}
		}
	}
	
	public partial class Get_SoftwareResourceResult
	{
		
		private int _SoftResourceID;
		
		private string _SoftResourceDesc;
		
		public Get_SoftwareResourceResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftResourceID", DbType="Int NOT NULL")]
		public int SoftResourceID
		{
			get
			{
				return this._SoftResourceID;
			}
			set
			{
				if ((this._SoftResourceID != value))
				{
					this._SoftResourceID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoftResourceDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SoftResourceDesc
		{
			get
			{
				return this._SoftResourceDesc;
			}
			set
			{
				if ((this._SoftResourceDesc != value))
				{
					this._SoftResourceDesc = value;
				}
			}
		}
	}
	
	public partial class Search_AddressResult
	{
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Address3;
		
		private string _City;
		
		private string _State;
		
		private string _Country;
		
		private string _Zip;
		
		private System.Nullable<int> _AddressTypeID;
		
		public Search_AddressResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this._Address1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(50)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this._Address2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address3", DbType="VarChar(50)")]
		public string Address3
		{
			get
			{
				return this._Address3;
			}
			set
			{
				if ((this._Address3 != value))
				{
					this._Address3 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this._State = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this._Country = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this._Zip = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressTypeID", DbType="Int")]
		public System.Nullable<int> AddressTypeID
		{
			get
			{
				return this._AddressTypeID;
			}
			set
			{
				if ((this._AddressTypeID != value))
				{
					this._AddressTypeID = value;
				}
			}
		}
	}
	
	public partial class Search_PhoneResult
	{
		
		private string _Phone;
		
		private string _PhoneTypeID;
		
		public Search_PhoneResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeID", DbType="VarChar(4)")]
		public string PhoneTypeID
		{
			get
			{
				return this._PhoneTypeID;
			}
			set
			{
				if ((this._PhoneTypeID != value))
				{
					this._PhoneTypeID = value;
				}
			}
		}
	}
	
	public partial class Get_CategoryResult
	{
		
		private int _CategoryID;
		
		private string _CategoryDesc;
		
		public Get_CategoryResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this._CategoryID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryDesc
		{
			get
			{
				return this._CategoryDesc;
			}
			set
			{
				if ((this._CategoryDesc != value))
				{
					this._CategoryDesc = value;
				}
			}
		}
	}
	
	public partial class Get_TopicDetailsResult
	{
		
		private string _DetailDesc;
		
		private int _DiscussionDetailID;
		
		private System.DateTime _CreatedOn;
		
		private string _CreatedBy;
		
		private string _CreatedByName;
		
		public Get_TopicDetailsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailDesc", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string DetailDesc
		{
			get
			{
				return this._DetailDesc;
			}
			set
			{
				if ((this._DetailDesc != value))
				{
					this._DetailDesc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscussionDetailID", DbType="Int NOT NULL")]
		public int DiscussionDetailID
		{
			get
			{
				return this._DiscussionDetailID;
			}
			set
			{
				if ((this._DiscussionDetailID != value))
				{
					this._DiscussionDetailID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this._CreatedOn = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(10)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByName", DbType="VarChar(101) NOT NULL", CanBeNull=false)]
		public string CreatedByName
		{
			get
			{
				return this._CreatedByName;
			}
			set
			{
				if ((this._CreatedByName != value))
				{
					this._CreatedByName = value;
				}
			}
		}
	}
	
	public partial class Get_AssoListPerGroupResult
	{
		
		private System.Nullable<int> _AssociateID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _email;
		
		private string _Mobile;
		
		public Get_AssoListPerGroupResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int")]
		public System.Nullable<int> AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					this._AssociateID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Char(10)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this._Mobile = value;
				}
			}
		}
	}
	
	public partial class Get_TopicsResult
	{
		
		private int _AssociateID;
		
		private string _UserId;
		
		private string _email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Mobile;
		
		private int _TopicID;
		
		private System.Nullable<bool> _IsParent;
		
		private int _CreatedBy;
		
		private System.DateTime _PostDateTime;
		
		private string _topicheader;
		
		private string _TopicDesc;
		
		private System.Nullable<int> _GroupID;
		
		private string _GroupDesc;
		
		private int _CategoryID;
		
		private System.Nullable<int> _IsActive;
		
		private string _CategoryDesc;
		
		private System.Nullable<int> _CommentCount;
		
		public Get_TopicsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int NOT NULL")]
		public int AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					this._AssociateID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(10)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this._Mobile = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicID", DbType="Int NOT NULL")]
		public int TopicID
		{
			get
			{
				return this._TopicID;
			}
			set
			{
				if ((this._TopicID != value))
				{
					this._TopicID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsParent", DbType="Bit")]
		public System.Nullable<bool> IsParent
		{
			get
			{
				return this._IsParent;
			}
			set
			{
				if ((this._IsParent != value))
				{
					this._IsParent = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime PostDateTime
		{
			get
			{
				return this._PostDateTime;
			}
			set
			{
				if ((this._PostDateTime != value))
				{
					this._PostDateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_topicheader", DbType="VarChar(250)")]
		public string topicheader
		{
			get
			{
				return this._topicheader;
			}
			set
			{
				if ((this._topicheader != value))
				{
					this._topicheader = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicDesc", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string TopicDesc
		{
			get
			{
				return this._TopicDesc;
			}
			set
			{
				if ((this._TopicDesc != value))
				{
					this._TopicDesc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this._GroupID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupDesc
		{
			get
			{
				return this._GroupDesc;
			}
			set
			{
				if ((this._GroupDesc != value))
				{
					this._GroupDesc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this._CategoryID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Int")]
		public System.Nullable<int> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryDesc
		{
			get
			{
				return this._CategoryDesc;
			}
			set
			{
				if ((this._CategoryDesc != value))
				{
					this._CategoryDesc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentCount", DbType="Int")]
		public System.Nullable<int> CommentCount
		{
			get
			{
				return this._CommentCount;
			}
			set
			{
				if ((this._CommentCount != value))
				{
					this._CommentCount = value;
				}
			}
		}
	}
	
	public partial class Get_TopicResult
	{
		
		private int _AssociateID;
		
		private string _UserId;
		
		private string _email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Mobile;
		
		private int _TopicID;
		
		private System.Nullable<bool> _IsParent;
		
		private int _CreatedBy;
		
		private System.DateTime _PostDateTime;
		
		private string _topicheader;
		
		private string _TopicDesc;
		
		private System.Nullable<int> _GroupID;
		
		private string _GroupDesc;
		
		private int _CategoryID;
		
		private string _CategoryDesc;
		
		private System.Nullable<int> _CommentCount;
		
		public Get_TopicResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int NOT NULL")]
		public int AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					this._AssociateID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(10)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this._Mobile = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicID", DbType="Int NOT NULL")]
		public int TopicID
		{
			get
			{
				return this._TopicID;
			}
			set
			{
				if ((this._TopicID != value))
				{
					this._TopicID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsParent", DbType="Bit")]
		public System.Nullable<bool> IsParent
		{
			get
			{
				return this._IsParent;
			}
			set
			{
				if ((this._IsParent != value))
				{
					this._IsParent = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime PostDateTime
		{
			get
			{
				return this._PostDateTime;
			}
			set
			{
				if ((this._PostDateTime != value))
				{
					this._PostDateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_topicheader", DbType="VarChar(250)")]
		public string topicheader
		{
			get
			{
				return this._topicheader;
			}
			set
			{
				if ((this._topicheader != value))
				{
					this._topicheader = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicDesc", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string TopicDesc
		{
			get
			{
				return this._TopicDesc;
			}
			set
			{
				if ((this._TopicDesc != value))
				{
					this._TopicDesc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this._GroupID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupDesc
		{
			get
			{
				return this._GroupDesc;
			}
			set
			{
				if ((this._GroupDesc != value))
				{
					this._GroupDesc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this._CategoryID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDesc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryDesc
		{
			get
			{
				return this._CategoryDesc;
			}
			set
			{
				if ((this._CategoryDesc != value))
				{
					this._CategoryDesc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentCount", DbType="Int")]
		public System.Nullable<int> CommentCount
		{
			get
			{
				return this._CommentCount;
			}
			set
			{
				if ((this._CommentCount != value))
				{
					this._CommentCount = value;
				}
			}
		}
	}
	
	public partial class GetUserPWDResult
	{
		
		private string _Mobile;
		
		private string _Password;
		
		private string _email;
		
		public GetUserPWDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this._Mobile = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
	}
	
	public partial class Get_AssociateByIDResult
	{
		
		private int _AssociateID;
		
		private string _DOJ;
		
		private string _email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Mobile;
		
		private string _Designation;
		
		private string _PracticeName;
		
		private string _AccountName;
		
		private string _Location;
		
		private string _ProjectName;
		
		private string _Gender;
		
		public Get_AssociateByIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int NOT NULL")]
		public int AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					this._AssociateID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOJ", DbType="VarChar(20)")]
		public string DOJ
		{
			get
			{
				return this._DOJ;
			}
			set
			{
				if ((this._DOJ != value))
				{
					this._DOJ = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this._Mobile = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designation", DbType="VarChar(50)")]
		public string Designation
		{
			get
			{
				return this._Designation;
			}
			set
			{
				if ((this._Designation != value))
				{
					this._Designation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PracticeName", DbType="VarChar(50)")]
		public string PracticeName
		{
			get
			{
				return this._PracticeName;
			}
			set
			{
				if ((this._PracticeName != value))
				{
					this._PracticeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="VarChar(50)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this._AccountName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(10)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this._Location = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(100)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this._Gender = value;
				}
			}
		}
	}
	
	public partial class getAthenticateUserResult
	{
		
		private int _AssociateID;
		
		private string _Name;
		
		private string _Mobile;
		
		private string _email;
		
		private string _Gender;
		
		private int _DirectReportID;
		
		private string _DirectReporter;
		
		private bool _IsApproved;
		
		private System.Nullable<int> _ProjectID;
		
		private string _ProjectName;
		
		private string _Technology;
		
		private System.Nullable<int> _LocationID;
		
		private string _Location;
		
		private System.Nullable<int> _DesignationID;
		
		private string _Designation;
		
		private string _DOJ;
		
		private string _DOB;
		
		public getAthenticateUserResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int NOT NULL")]
		public int AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					this._AssociateID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(101) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this._Mobile = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this._Gender = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectReportID", DbType="Int NOT NULL")]
		public int DirectReportID
		{
			get
			{
				return this._DirectReportID;
			}
			set
			{
				if ((this._DirectReportID != value))
				{
					this._DirectReportID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectReporter", DbType="VarChar(101)")]
		public string DirectReporter
		{
			get
			{
				return this._DirectReporter;
			}
			set
			{
				if ((this._DirectReporter != value))
				{
					this._DirectReporter = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this._IsApproved = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int")]
		public System.Nullable<int> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(100)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technology", DbType="VarChar(50)")]
		public string Technology
		{
			get
			{
				return this._Technology;
			}
			set
			{
				if ((this._Technology != value))
				{
					this._Technology = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this._LocationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(10)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this._Location = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DesignationID", DbType="Int")]
		public System.Nullable<int> DesignationID
		{
			get
			{
				return this._DesignationID;
			}
			set
			{
				if ((this._DesignationID != value))
				{
					this._DesignationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designation", DbType="VarChar(50)")]
		public string Designation
		{
			get
			{
				return this._Designation;
			}
			set
			{
				if ((this._Designation != value))
				{
					this._Designation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOJ", DbType="VarChar(10)")]
		public string DOJ
		{
			get
			{
				return this._DOJ;
			}
			set
			{
				if ((this._DOJ != value))
				{
					this._DOJ = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="VarChar(10)")]
		public string DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this._DOB = value;
				}
			}
		}
	}
	
	public partial class getAssociateRoleGroupResult
	{
		
		private System.Nullable<int> _RoleID;
		
		private System.Nullable<int> _GroupID;
		
		private string _GroupName;
		
		private string _GroupDesc;
		
		private string _RoleDesc;
		
		public getAssociateRoleGroupResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int")]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this._GroupID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(50)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupDesc", DbType="VarChar(50)")]
		public string GroupDesc
		{
			get
			{
				return this._GroupDesc;
			}
			set
			{
				if ((this._GroupDesc != value))
				{
					this._GroupDesc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleDesc", DbType="VarChar(20)")]
		public string RoleDesc
		{
			get
			{
				return this._RoleDesc;
			}
			set
			{
				if ((this._RoleDesc != value))
				{
					this._RoleDesc = value;
				}
			}
		}
	}
	
	public partial class Get_GroupByIDResult
	{
		
		private int _GroupID;
		
		private string _GroupName;
		
		public Get_GroupByIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this._GroupID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
	}
	
	public partial class Get_GroupResult
	{
		
		private int _GroupID;
		
		private string _GroupName;
		
		public Get_GroupResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this._GroupID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
	}
	
	public partial class GetMemberByGroupAndRoleResult
	{
		
		private int _AssociateID;
		
		private string _FirstName;
		
		private string _LastName;
		
		public GetMemberByGroupAndRoleResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int NOT NULL")]
		public int AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					this._AssociateID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
	}
	
	public partial class Get_AssociateByUserIDResult
	{
		
		private int _AssociateID;
		
		private string _FirstName;
		
		private string _LastName;
		
		public Get_AssociateByUserIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int NOT NULL")]
		public int AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					this._AssociateID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
	}
	
	public partial class get_AdminByGroupResult
	{
		
		private int _AssociateID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _email;
		
		private string _Mobile;
		
		private string _UserId;
		
		public get_AdminByGroupResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssociateID", DbType="Int NOT NULL")]
		public int AssociateID
		{
			get
			{
				return this._AssociateID;
			}
			set
			{
				if ((this._AssociateID != value))
				{
					this._AssociateID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this._email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this._Mobile = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(10)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
	}
	
	public partial class sp_SMSAccountsResult
	{
		
		private int _Id;
		
		private string _Email;
		
		private string _Password;
		
		private string _Phone;
		
		private System.Nullable<int> _SentSMS;
		
		public sp_SMSAccountsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(64)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(32)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(13)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentSMS", DbType="Int")]
		public System.Nullable<int> SentSMS
		{
			get
			{
				return this._SentSMS;
			}
			set
			{
				if ((this._SentSMS != value))
				{
					this._SentSMS = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
